(quot 3 2)
(quot 3 2 2 5)
(defn x '(1 2 3 4 5))
(defn x 1 2 3 4 5)
(defn x [1 2 3])
(def x [1 2 3])
x
(reduce + x)
(defn plus1 [n] (+ n 1))
(plus1 3)
(apply plus1 x)
(apply (+ 1) x)
x
(defn plus1 [&n] (+ n 1))
(defn plus1 [& n] (+ n 1))
(apply plus1 x)
(plus1 x)
(apply plus1 x)
(plus1 3)
(defn plus1 [& n] (apply (+ 1) n)))
(defn plus1 [& n] (apply (+ 1) n))
(plus1 x)
(plus1 1)
(apply (+ 1) [1 2 3])
(+ 1)
(+ 1 2)
(+ 1 2 3)
(plus1 1)
(defn plus1 [n] (apply (+ 1) n))
(plus1 2)
(defn plus1 [n] (+ 1 n))
(plus1 2)
(plus1 2 3)
(map plus1 (1 2 3)
)
(map plus1 '(1 2 3))
(map (+ 1) '(1 2 3))
(map (partial + 1) '(1 2 3))
quit
(fuel 3)
(Integer/parseInt "3")
(Integer/parseInt "3" "7")
(map Integer/parseInt "3" "7")
(map Integer/parseInt ["3" "7"])
(map Integer/parseInt ["3"])
(str ["3"])
(str ["3" "4"])
(map str ["3" "4"])
(map Integer/parseInt ["3"])
(Integer/parseInt "3" "7")
(Integer/parseInt "3")
(Integer/parseInt ["3" "4"])
(map Integer/parseInt ["3" "4"])
(map read-string ["3" "4"])
quit
(fuel 10)
(fuel 100)
(fuel 10)
(fuel 12)
quit
(<= 0 12)
(<= 12 0)
quit
